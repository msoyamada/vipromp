/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelaPrincipal.java
 *
 * Created on 07/01/2010, 10:53:39
 */

package visao;
import modelo.Ambiente;
import AG.AGconfig;
import componentes.BridgeCarac;
import componentes.BarrCarac;
import componentes.ProcCarac;
import componentes.TimerCarac;
import componentes.MemCarac;
//import controlador.*;
import controlador.Controlador;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

//import com.google.appengine.api.images.ImagesService;
//import com.google.appengine.api.images.ImagesServiceFactory;
//import com.google.appengine.api.images.Transform;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import modelo.Ambiente;
import objetos.CompDados;

/**
 *
 * @author carin
 */
public class TelaPrincipal extends javax.swing.JFrame {

    public int CompCont; //n√∫mero de componentes existentes no banco de dados

    public CompDados atual; // componente selcionado para ser inserido, ou modificado

    public Vector<CompDados> compsNaTela; //container de componentes na tela
    public Vector<CompDados> biblio; //container de componentes existentes na biblioteca

    public Vector<String> conexoes;

    public int procCont;
    public int memCont;
    public int barrCont;
    public int timerCont;
    public int bridgeCont;

    public boolean haveSelected;
    public boolean dir;
    public Variarconfig variarconfig;
    
    public TelaPrincipal() {

        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);

        compsNaTela = new Vector<CompDados>();
        biblio = new Vector<CompDados>();

        conexoes = new Vector<String>();

        //Image im1 = new ImageIcon("Imagens/bboy1.jpg").getImage();

        //ImagesService imagesService = ImagesServiceFactory.getImagesService();
        //Transform resize = ImagesServiceFactory.makeResize(10, 10);

        //im1 = imagesService.applyTransform(resize, im1);

        CompCont = 5;
        atual = new CompDados();

        procCont = 1;
        memCont = 1;
        barrCont = 1;
        timerCont = 1;
        bridgeCont = 1;

	//System.out.println("SO: " + System.getProperties().get("os.name"));

        this.setTitle("Inter4VIPRO-MP prototype");

        haveSelected = false;
        dir = false;

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FundoP = new javax.swing.JPanel();
        CenarioP = new javax.swing.JPanel();
        BibliotecaDeCompP = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        WarningT = new javax.swing.JTextArea();
        SimularB = new javax.swing.JButton();
        SairB = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        AbrirProjeto = new javax.swing.JMenuItem();
        SalvarProjeto = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        CenarioP.setBackground(new java.awt.Color(255, 255, 255));
        CenarioP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        CenarioP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CenarioPMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CenarioPMousePressed(evt);
            }
        });
        CenarioP.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                CenarioPMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout CenarioPLayout = new javax.swing.GroupLayout(CenarioP);
        CenarioP.setLayout(CenarioPLayout);
        CenarioPLayout.setHorizontalGroup(
            CenarioPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 561, Short.MAX_VALUE)
        );
        CenarioPLayout.setVerticalGroup(
            CenarioPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 377, Short.MAX_VALUE)
        );

        BibliotecaDeCompP.setBackground(new java.awt.Color(255, 255, 255));
        BibliotecaDeCompP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BibliotecaDeCompP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BibliotecaDeCompPMousePressed(evt);
            }
        });

        javax.swing.GroupLayout BibliotecaDeCompPLayout = new javax.swing.GroupLayout(BibliotecaDeCompP);
        BibliotecaDeCompP.setLayout(BibliotecaDeCompPLayout);
        BibliotecaDeCompPLayout.setHorizontalGroup(
            BibliotecaDeCompPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        BibliotecaDeCompPLayout.setVerticalGroup(
            BibliotecaDeCompPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 377, Short.MAX_VALUE)
        );

        WarningT.setColumns(20);
        WarningT.setEditable(false);
        WarningT.setRows(2);
        WarningT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                WarningTMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(WarningT);

        SimularB.setText("Simular");
        SimularB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimularBActionPerformed(evt);
            }
        });

        SairB.setText("Sair");
        SairB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SairBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FundoPLayout = new javax.swing.GroupLayout(FundoP);
        FundoP.setLayout(FundoPLayout);
        FundoPLayout.setHorizontalGroup(
            FundoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FundoPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FundoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CenarioP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FundoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SairB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SimularB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BibliotecaDeCompP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        FundoPLayout.setVerticalGroup(
            FundoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FundoPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FundoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CenarioP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BibliotecaDeCompP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FundoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(FundoPLayout.createSequentialGroup()
                        .addComponent(SimularB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SairB))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jMenu1.setText("Projeto");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Criar Projeto");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        AbrirProjeto.setText("Abrir Projeto");
        AbrirProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirProjetoActionPerformed(evt);
            }
        });
        jMenu1.add(AbrirProjeto);

        SalvarProjeto.setText("Salvar Projeto");
        SalvarProjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarProjetoActionPerformed(evt);
            }
        });
        jMenu1.add(SalvarProjeto);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Variar");

        jMenuItem2.setText("Variar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem6.setText("Config");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Otimiza√ß√£o");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem3.setText("AG config");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("RN config");
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Otimizar Arquitetura");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(FundoP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FundoP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SimularBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimularBActionPerformed

        if (!this.dir){

            int diro = JOptionPane.showConfirmDialog(this, "Voc√™ n√£o especificou um diret√≥rio, e sera usado o diretorio padr√£o (/home/pardal/Desktop/Projeto). Deseja continuar?", "AVISO", 0);

	    dir = true;
            if (diro == 1){
            
		JFileChooser chooser = new JFileChooser();

		int returnVal = chooser.showOpenDialog(this);
		
		if(returnVal == JFileChooser.APPROVE_OPTION) Controlador.controlador(chooser.getSelectedFile() + ":&:newDir");
		else dir = false;

            } else Controlador.controlador("/home/jcanabarro/testes/Projeto/:&:newDir");

        }

        if (dir){

            Controlador.controlador("/home/jcanabarro/testes/Projeto/:&:newDir");
            if (Controlador.controlador("MakeFile").equals("Sucesso")){

                Warnings("Makefile construido com sucesso!", new Color(0, 155, 0));

                if (Controlador.controlador("Main").equals("Sucesso")){

                    Warnings("Main construido com sucesso!", new Color(0, 155, 0));

                    if (Controlador.controlador("Script").equals("Sucesso")){

                        Warnings("Scripts construido com sucesso!", new Color(0, 155, 0));

                        if (Controlador.controlador("Configure").equals("Sucesso")){

                            Warnings("Arquivo(s) Configure construido(s) com sucesso!", new Color(0, 155, 0));

                            if (Controlador.controlador("GetFiles").equals("Sucesso")){

                                Warnings("Arquivo(s) copiado(s) com sucesso!", new Color(0, 155, 0));

                                if (Controlador.controlador("CommandMake").equals("Sucesso")){

                                    Warnings("Objetos criados com sucesso!", new Color(0, 155, 0));
                                    Warnings("Executando Script...", new Color(0, 155, 0));

                                    if (Controlador.controlador("Executar").equals("Sucesso")){

                                        Warnings("Script executado com sucesso!", new Color(0, 155, 0));

                                    } else Warnings("ERRO ao executar o Script", new Color(155, 0, 0));

                                } else Warnings("ERRO ao criar os objetos!", new Color(155, 0, 0));


                            } else Warnings("ERRO ao copiar o(s) arquivo(s) necess√°rios para o projeto", new Color(155, 0, 0));

                        } else Warnings("ERRO ao construir o(s) arquivo(s) Configure", new Color(155, 0, 0));                        

                    } else Warnings("ERRO ao construir os Scripts", new Color(155, 0, 0));

                } else Warnings("ERRO ao construir o arquivo Main", new Color(155, 0, 0));

            }else Warnings("ERRO ao construir o arquivo Makefile", new Color(155, 0, 0));

        }

    }//GEN-LAST:event_SimularBActionPerformed

    private void SairBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SairBActionPerformed

        System.exit(0);

    }//GEN-LAST:event_SairBActionPerformed

    private void CenarioPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CenarioPMousePressed

        if (evt.isMetaDown()){ //conectando componentes
            
            String retorno = Controlador.controlador(evt.getX() + ":&:" + evt.getY() + ":&:GetIn");
            //System.out.println("RETORNO: " + retorno.split(":&:")[1]);
            if (retorno.split(":&:")[0].equals("ConexaoEstabelecida"))this.conexoes.add(retorno.split(":&:")[1]);

            this.haveSelected = false;
            Controlador.controlador("descelecionar");
            
        } else {

            Controlador.controlador("zeraConect");

            if (evt.getClickCount() == 2){ //abrindo propriedades de um componente

                String CompType = Controlador.controlador("GetSelectType");
                String car[] = Controlador.controlador("GetSelectCarac").split(":&:");
                Vector caracs = new Vector();

                for (int i = 0; i < car.length; i++) caracs.add(car[i]);
                //System.out.println(caracs);

                if (selecionar(evt.getX(), evt.getY())){

                    if (CompType.equals("processador")){

                        ProcCarac telinha = new ProcCarac(evt.getX(), evt.getY(), CenarioP, compsNaTela.get(compsNaTela.size() - 1).getCompName(), this, caracs);
                        telinha.setVisible(true);

                    } else if (CompType.equals("memoria")){

                        MemCarac telinha = new MemCarac(evt.getX(), evt.getY(), CenarioP, compsNaTela.get(compsNaTela.size() - 1).getCompName(), this, caracs);
                        telinha.setVisible(true);

                    } else if (CompType.equals("barramento")){

                        BarrCarac telinha = new BarrCarac(evt.getX(), evt.getY(), CenarioP, compsNaTela.get(compsNaTela.size() - 1).getCompName(), this, caracs);
                        telinha.setVisible(true);

                    } else if (CompType.equals("timer")){

                        TimerCarac telinha = new TimerCarac(evt.getX(), evt.getY(), CenarioP, compsNaTela.get(compsNaTela.size() - 1).getCompName(), this, caracs);
                        telinha.setVisible(true);

                    } else if (CompType.equals("bridge")){

                        BridgeCarac telinha = new BridgeCarac(evt.getX(), evt.getY(), CenarioP, compsNaTela.get(compsNaTela.size() - 1).getCompName(), this, caracs);
                        telinha.setVisible(true);

                    }

                }

            } else {

                if (selecionar(evt.getX(), evt.getY())){ //selecionando componente

                    Warnings("Componente " + atual.getCompName() + " selecionado", new Color(0, 155, 0));
                    this.haveSelected = true;
                    Controlador.controlador(atual.getCompName() + ":&:selecionar");

                } else {

                    if ((atual != null) && (!this.haveSelected)){ //inserindo componente-

                        //System.out.println("Atual type: " + atual.getCompType());

                        if (atual.getCompType().equals("processador")){

                            ProcCarac telinha = new ProcCarac(evt.getX(), evt.getY(), CenarioP, "" + procCont, this, null);
                            telinha.setVisible(true);

                        } else if (atual.getCompType().equals("memoria")){
                            
                            MemCarac telinha = new MemCarac(evt.getX(), evt.getY(), CenarioP, "" + memCont, this, null);
                            telinha.setVisible(true);

                        } else if (atual.getCompType().equals("barramento")){

                            BarrCarac telinha = new BarrCarac(evt.getX(), evt.getY(), CenarioP, "" + barrCont, this, null);
                            telinha.setVisible(true);

                        } else if (atual.getCompType().equals("timer")){

                            TimerCarac telinha = new TimerCarac(evt.getX(), evt.getY(), CenarioP, "" + timerCont, this, null);
                            telinha.setVisible(true);

                        } else if (atual.getCompType().equals("bridge")){

                            BridgeCarac telinha = new BridgeCarac(evt.getX(), evt.getY(), CenarioP, "" + bridgeCont, this, null);
                            telinha.setVisible(true);

                        }

                    } else { //descelecionando componente

                        haveSelected = false;
                        Controlador.controlador("descelecionar");

                    }

                }

            }

        }

        repaint();

    }//GEN-LAST:event_CenarioPMousePressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        construir();
        AGconfig.Inic();
        
    }//GEN-LAST:event_formWindowOpened

    private void BibliotecaDeCompPMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BibliotecaDeCompPMousePressed

        for (int i = 0; i < biblio.size(); i++) biblio.get(i).setisSelect(false);
        atual = getAtBiblio(evt.getY(), true);

        if (atual != null) Warnings("Componete " + atual.getCompType() + " selecionado!", new Color(0, 155, 0));
        else Warnings("Nenhum componente selecionado!", new Color(0, 0, 155));

        haveSelected = false;
        Controlador.controlador("descelecionar");

        repaint();

    }//GEN-LAST:event_BibliotecaDeCompPMousePressed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
    }//GEN-LAST:event_formWindowGainedFocus

    private void CenarioPMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CenarioPMouseDragged

        if (haveSelected){

            Point p = new Point(evt.getX(), evt.getY());

            p.x = p.x - compsNaTela.get(compsNaTela.size() - 1).getImagem().getWidth(null) / 2;
            p.y = p.y - compsNaTela.get(compsNaTela.size() - 1).getImagem().getHeight(null) / 2;
            
            compsNaTela.get(compsNaTela.size() - 1).setLocal(p);

            String z = compsNaTela.get(compsNaTela.size() - 1).getCompName() + ":&:" + p.x + ":&:" + p.y + ":&:setLocal";
            
            Controlador.controlador(z);

        }

        repaint();

    }//GEN-LAST:event_CenarioPMouseDragged

    private void CenarioPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CenarioPMouseClicked

        

    }//GEN-LAST:event_CenarioPMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

	dir = true;
	JFileChooser chooser = new JFileChooser();
	
	int returnVal = chooser.showOpenDialog(this);
	if(returnVal == JFileChooser.APPROVE_OPTION) {	   
	   Controlador.controlador(chooser.getSelectedFile() + ":&:newDir");
	}                

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void WarningTMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WarningTMousePressed

        if (evt.getClickCount() == 2){

            //System.out.println("iu");
            Dimension p = new Dimension(200, 300);
            WarningT.setRows(500);

        }

    }//GEN-LAST:event_WarningTMousePressed

    private void SalvarProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarProjetoActionPerformed

        Controlador.controlador("Save");

    }//GEN-LAST:event_SalvarProjetoActionPerformed

    private void AbrirProjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirProjetoActionPerformed

        JFileChooser chooser = new JFileChooser();

	int returnVal = chooser.showOpenDialog(this);
	if(returnVal == JFileChooser.APPROVE_OPTION) {

	   Open (Controlador.controlador(chooser.getSelectedFile() + ":&:Open"));

	}

        Controlador.controlador("/home/jcanabarro/testes/Projeto/:&:newDir");

    }//GEN-LAST:event_AbrirProjetoActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (variarconfig ==null) variarconfig= new Variarconfig();
        
     /*   Ambiente.minmaxvariar[0][0]= Integer.parseInt(variarconfig.minMem.getText());
        Ambiente.minmaxvariar[0][1]= Integer.parseInt(variarconfig.maxMem.getText());
        Ambiente.minmaxvariar[1][0]= Integer.parseInt(variarconfig.minFun.getText());
        Ambiente.minmaxvariar[1][1]= Integer.parseInt(variarconfig.maxFun.getText());
        Ambiente.minmaxvariar[2][0]= Integer.parseInt(variarconfig.minIL1.getText());
        Ambiente.minmaxvariar[2][1]= Integer.parseInt(variarconfig.maxIL1.getText());
        Ambiente.minmaxvariar[3][0]= Integer.parseInt(variarconfig.minDL1.getText());
        Ambiente.minmaxvariar[3][1]= Integer.parseInt(variarconfig.maxDL1.getText());
        Ambiente.minmaxvariar[4][0]= Integer.parseInt(variarconfig.minScalar.getText());
        Ambiente.minmaxvariar[4][1]= Integer.parseInt(variarconfig.maxScalar.getText());*/
        Warnings("Aguarde. Simula√ß√£o em Andamento!", Color.red);
        variar();
        Warnings("Simula√ß√£o Concluida com Sucesso!", Color.BLUE);

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        
        AGconfig configure = new AGconfig(this);
        configure.setVisible(true);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        jMenu3.setSelected(false);
        Warnings(Controlador.controlador("Otimizar"), Color.blue);
        repaint();

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        if (variarconfig==null)
            variarconfig= new Variarconfig();
        variarconfig.setVisible(true);
             
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirProjeto;
    private javax.swing.JPanel BibliotecaDeCompP;
    private javax.swing.JPanel CenarioP;
    private javax.swing.JPanel FundoP;
    private javax.swing.JButton SairB;
    private javax.swing.JMenuItem SalvarProjeto;
    private javax.swing.JButton SimularB;
    private javax.swing.JTextArea WarningT;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void insertImage (String nome, int a, int b, JPanel pan, Vector caracs, boolean selec, String type, boolean colokAmbi) { //adiciona uma imagem no campo de visualiza√ß√£o

        try {            

            Graphics g = pan.getGraphics();

            Image im = new ImageIcon(atual.getCaminho()).getImage();;
            
            int x = ( a - im.getWidth ( null ) / 2 ) ;
            int y = ( b - im.getHeight ( null ) / 2 ) ;

            Point ip = new Point(x, y);            

            compsNaTela.add(new CompDados(im, selec, nome, type, atual.getCaminho(), ip));

            String componente = nome + ":&:" + type + ":&:" + im.getWidth(null) + ":&:" + im.getHeight(null) + ":&:" + ip.x + ":&:" + ip.y;            

            for (int i = 0; i < caracs.size(); i++) componente += ":&:" + caracs.get(i);
            //System.out.println("componente: " + componente);

            if (colokAmbi) Controlador.controlador(componente + ":&:addComp");

            g.drawImage ( atual.getImagem() , x , y , this );

            if (type.equals("processador")) procCont++;
            else if (type.equals("memoria")) memCont++;
            else if (type.equals("barramento")) barrCont++;
            else if (type.equals("timer")) timerCont++;
            else if (type.equals("bridge")) bridgeCont++;

        } catch (NullPointerException e){

            Warnings("Ocorreu uma Falha ao capturar a imagem desejada, ou nenhum componente foi selecionado!", Color.red);
            System.out.println(e.getMessage());

        }

        //repaint();

    }

    public void insertImage4Re ( int a, int b, JPanel pan, Image im, String nome) { //adiciona uma imagem no campo de visualiza√ß√£o

        try {

            Graphics g = pan.getGraphics();
            g.drawImage ( im , a , b , this );
            g.drawString(nome , a + (im.getWidth(null) / 2) - (nome.length() / 2) * 6, b + im.getHeight(null) / 2 + 20); //VER SE DA P MELHORAR

        } catch (NullPointerException e){

            Warnings("Ocorreu uma Falha ao capturar a imagem desejada, ou nenhum componente foi selecionado!", Color.red);
            System.out.println(e.getMessage());

        }

    }

    public void Warnings (String s, Color c){ //coloca um aviso para o usu√°rio
        
        WarningT.setForeground(c);
        WarningT.append(s + "\n");

    }

    public void construir(){ //carrega os componentes para a lista de componentes

        //inserindo componentes na biblioteca visual
        Graphics temp = BibliotecaDeCompP.getGraphics();
        Point p = new Point(10, 15);
        Image imgAux = new ImageIcon().getImage();
        int x = 13;

        p = new Point(10, x);
        imgAux = new ImageIcon("Imagens/proc.jpg").getImage();
        biblio.add(new CompDados(imgAux, false, "", "processador", "Imagens/proc.jpg", p));
        x += 15;

        p = new Point(10, x);
        imgAux = new ImageIcon("Imagens/barramento.jpg").getImage();
        biblio.add(new CompDados(imgAux, false, "", "barramento", "Imagens/barramento.jpg", p));
        x += 15;

        p = new Point(10, x);
        imgAux = new ImageIcon("Imagens/memoria.jpg").getImage();
        biblio.add(new CompDados(imgAux, false, "", "memoria", "Imagens/memoria.jpg", p));
        x += 15;

        p = new Point(10, x);
        imgAux = new ImageIcon("Imagens/timer.jpg").getImage();
        biblio.add(new CompDados(imgAux, false, "", "timer", "Imagens/timer.jpg", p));
        x += 15;

        p = new Point(10, x);
        imgAux = new ImageIcon("Imagens/bridge.jpg").getImage();
        biblio.add(new CompDados(imgAux, false, "", "bridge", "Imagens/bridge.jpg", p));
        x += 15;

        //refazer();

    }    
    
    //@Override
    public void paint(Graphics g){ //sera o rapaint, ainda n√£o concluido

        super.paint(this.getGraphics());

        Graphics temp = BibliotecaDeCompP.getGraphics(); //reescreendo a biblioteca
        CompDados aux = new CompDados();

        for (int i = 0; i < biblio.size(); i++){
            
            aux = biblio.get(i);            

            if (aux.isSelect()) selecionarPalavra(aux, temp);
            else temp.drawString(aux.getCompType(), (int)aux.getLocal().getX(), (int)aux.getLocal().getY());

        }

        temp = CenarioP.getGraphics(); //reescrevendo ambiente
        for (int i = 0; i < compsNaTela.size(); i++){
            
            insertImage4Re((int)compsNaTela.get(i).getLocal().getX(), (int)compsNaTela.get(i).getLocal().getY(), CenarioP, compsNaTela.get(i).getImagem(), "(" + compsNaTela.get(i).getCompName() + ")");

            if (compsNaTela.get(i).isSelect()) this.selecionarFigura(compsNaTela.get(i), temp);

        }
        
        for (int i = 0; i < conexoes.size(); i++){

            conectar(conexoes.get(i).split("::")[0], conexoes.get(i).split("::")[1], temp);

        }

    }

    public void selecionarPalavra(CompDados aux, Graphics temp){

        temp.setColor(new Color(20, 20, 75));

        temp.drawLine(1, (int)aux.getLocal().getY() + 2, BibliotecaDeCompP.getWidth() - 2, (int)aux.getLocal().getY() + 2);
        temp.drawLine(1, (int)aux.getLocal().getY() + 3, BibliotecaDeCompP.getWidth() - 2, (int)aux.getLocal().getY() + 3);        

        temp.drawLine(1, (int)aux.getLocal().getY() - 11, BibliotecaDeCompP.getWidth() - 2, (int)aux.getLocal().getY() - 11);
        temp.drawLine(1, (int)aux.getLocal().getY() - 12, BibliotecaDeCompP.getWidth() - 2, (int)aux.getLocal().getY() - 12);        

        temp.drawLine(1, (int)aux.getLocal().getY() + 2, 1, (int)aux.getLocal().getY() - 11);
        temp.drawLine(2, (int)aux.getLocal().getY() + 2, 2, (int)aux.getLocal().getY() - 11);        

        temp.drawLine(BibliotecaDeCompP.getWidth() - 2, (int)aux.getLocal().getY() + 2, BibliotecaDeCompP.getWidth() - 2, (int)aux.getLocal().getY() - 11);
        temp.drawLine(BibliotecaDeCompP.getWidth() - 3, (int)aux.getLocal().getY() + 2, BibliotecaDeCompP.getWidth() - 3, (int)aux.getLocal().getY() - 11);
        
        temp.setColor(new Color(180, 180, 255));

        temp.drawLine(3, (int)aux.getLocal().getY() + 1, BibliotecaDeCompP.getWidth() - 4, (int)aux.getLocal().getY() + 1);
        for (int i = 0; i < 11; i++) temp.drawLine(3, (int)aux.getLocal().getY() - i, BibliotecaDeCompP.getWidth() - 4, (int)aux.getLocal().getY() - i);

        temp.setColor(new Color(255, 255, 255));

        temp.drawString(aux.getCompType(), (int)aux.getLocal().getX(), (int)aux.getLocal().getY());

        temp.setColor(Color.BLACK);

    }

    public void selecionarFigura (CompDados fig, Graphics temp){

        temp.setColor(new Color(20, 20, 75));

        this.pontilhadoX((int)(fig.getLocal().getX()) - 5, (int)(fig.getLocal().getY()) - 5, (int)(fig.getLocal().getX() + fig.getImagem().getWidth(null)) + 5, (int)(fig.getLocal().getY()) - 5, temp);
        this.pontilhadoX((int)(fig.getLocal().getX()) - 5, (int)(fig.getLocal().getY()) + 5 + fig.getImagem().getHeight(null), (int)(fig.getLocal().getX() + fig.getImagem().getWidth(null)) + 5, (int)(fig.getLocal().getY()) + 5 + fig.getImagem().getHeight(null), temp);

        this.pontilhadoY((int)(fig.getLocal().getX()) - 5, (int)(fig.getLocal().getY()) - 5, (int)(fig.getLocal().getX()) - 5, (int)(fig.getLocal().getY() + fig.getImagem().getHeight(null)) + 5, temp);
        this.pontilhadoY((int)(fig.getLocal().getX()) + 5 + fig.getImagem().getWidth(null), (int)(fig.getLocal().getY()) - 5, (int)(fig.getLocal().getX()) + 5 + fig.getImagem().getWidth(null), (int)(fig.getLocal().getY() + fig.getImagem().getHeight(null)) + 5, temp);

        this.quadradinho((int)fig.getLocal().getX() - 5, (int)fig.getLocal().getY() - 5, temp);
        this.quadradinho((int)fig.getLocal().getX() + 5 + (int)fig.getImagem().getWidth(null) , (int)fig.getLocal().getY() - 5, temp);
        this.quadradinho((int)fig.getLocal().getX() - 5, (int)fig.getLocal().getY() + 5 + (int)fig.getImagem().getHeight(null), temp);
        this.quadradinho((int)fig.getLocal().getX() + 5 + (int)fig.getImagem().getWidth(null), (int)fig.getLocal().getY() + 5 + (int)fig.getImagem().getHeight(null), temp);

        this.quadradinho((int)fig.getLocal().getX() + 5 + (int)fig.getImagem().getWidth(null) / 2 , (int)fig.getLocal().getY() - 5, temp);
        this.quadradinho((int)fig.getLocal().getX() + 5 + (int)fig.getImagem().getWidth(null) / 2, (int)fig.getLocal().getY() + 5 + (int)fig.getImagem().getHeight(null), temp);
        this.quadradinho((int)fig.getLocal().getX() + 5 + (int)fig.getImagem().getWidth(null), (int)fig.getLocal().getY() + 5 + (int)fig.getImagem().getHeight(null) / 2, temp);
        this.quadradinho((int)fig.getLocal().getX() - 5, (int)fig.getLocal().getY() + 5 + (int)fig.getImagem().getHeight(null) / 2, temp);

        temp.setColor(Color.BLACK);

    }

    public void pontilhadoX(int xi, int yi, int xf, int yf, Graphics temp){

        boolean pinta = true;

        for (int i = xi; i < xf; i ++){

            if (pinta) temp.drawLine(i, yi, i, yi);

            if ((xi - i) % 5 == 0) pinta = !pinta;

        }

    }

    public void pontilhadoY(int xi, int yi, int xf, int yf, Graphics temp){

        boolean pinta = true;

        for (int i = yi; i < yf; i ++){

            if (pinta) temp.drawLine(xi, i, xi, i);

            if ((yi - i) % 5 == 0) pinta = !pinta;

        }

    }

    public void quadradinho (int xc, int yc, Graphics temp){

        temp.drawLine(xc - 2, yc - 2, xc + 2, yc - 2);
        temp.drawLine(xc - 2, yc - 1, xc + 2, yc - 1);
        temp.drawLine(xc - 2, yc, xc + 2, yc);
        temp.drawLine(xc - 2, yc + 1, xc + 2, yc + 1);
        temp.drawLine(xc - 2, yc + 2, xc + 2, yc + 2);

    }

    public CompDados getAtBiblio (int y, boolean seleciona){ //pega o nome do componente selecionado no container

        CompDados aux = new CompDados();

        for (int i = 0; i < biblio.size(); i++){

            aux = biblio.get(i);

            if ((aux.getLocal().getY() - 14 <= y) && (aux.getLocal().getY() >= y)){
                
                if (seleciona) biblio.get(i).setisSelect(true);
                return aux;

            }

        }

        return null;

    }

    public boolean selecionar(int x, int y){

        boolean taX = false;
        boolean taY = false;

        Point p = new Point();

        for (int i = 0; i < compsNaTela.size(); i++) compsNaTela.get(i).setisSelect(false);

        for (int i = compsNaTela.size() - 1; i >= 0; i--){

            taX = false;
            taY = false;

            p = compsNaTela.get(i).getLocal();

            if ((x > p.getX()) && (x < (p.getX() + compsNaTela.get(i).getImagem().getWidth(null)))) taX = true;
            if ((y > p.getY()) && (y < (p.getY() + compsNaTela.get(i).getImagem().getHeight(null)))) taY = true;

            if (taX && taY){

                compsNaTela.get(i).setisSelect(true);
                atual = compsNaTela.get(i);

                compsNaTela.remove(i);
                compsNaTela.add(atual);

                return true;

            }

        }

        return false;

    }

    public void removeComp(int index){//Vai pro ambiente

        Controlador.controlador("RemoveSelectParcial");

        if (index == -1) compsNaTela.remove(compsNaTela.size() - 1);
        else compsNaTela.remove(index);

        repaint();

    }

    public void conectar(String compA, String compB, Graphics temp){ //melhorar

        Point a = new Point();
        Point b = new Point();

        Point fugaA = new Point();
        Point fugaB = new Point();

        int posA = -1;
        int posB = -1;

        boolean vamuLa = false;

        for (int i = 0; i < compsNaTela.size(); i++){

            if (compsNaTela.get(i).getCompName().equals(compA)){

                a.x = compsNaTela.get(i).getLocal().x + compsNaTela.get(i).getImagem().getWidth(null) / 2;
                a.y = compsNaTela.get(i).getLocal().y + compsNaTela.get(i).getImagem().getHeight(null) / 2;
                posA = i;

            }

            if (compsNaTela.get(i).getCompName().equals(compB)){

                b.x = compsNaTela.get(i).getLocal().x + compsNaTela.get(i).getImagem().getWidth(null) / 2;
                b.y = compsNaTela.get(i).getLocal().y + compsNaTela.get(i).getImagem().getHeight(null) / 2;
                posB = i;

            }

        }

        double dist = Math.sqrt((Math.pow(Math.abs((double)b.x - (double)a.x), 2)) + (Math.pow(Math.abs((double)b.y - (double)a.y), 2)));
        double deltaX = Math.abs((double)b.x - (double)a.x);
        double angle = Math.asin(deltaX / dist);

        if ((a.y <= b.y) && (a.x <= b.x)){

            if (angle >= 1){//OK

                //fugaB4 fugaA2
                fugaA = compsNaTela.get(posA).getFuga2();
                fugaB = compsNaTela.get(posB).getFuga4();
                vamuLa = true;
                
            } else {//OK

                //fugaB3 fugaA1                
                fugaA = compsNaTela.get(posA).getFuga1();
                fugaB = compsNaTela.get(posB).getFuga3();                
                
            }

        } else if ((a.y > b.y) && (a.x <= b.x)){

            if (angle >= 1){//OK

                //fugaB4 fugaA2
                fugaA = compsNaTela.get(posA).getFuga2();
                fugaB = compsNaTela.get(posB).getFuga4();
                vamuLa = true;
                
            } else {

                //fugaB1 fugaA3
                fugaA = compsNaTela.get(posA).getFuga3();
                fugaB = compsNaTela.get(posB).getFuga1();                

            }

        } else if ((a.y <= b.y) && (a.x > b.x)){

            if (angle >= 1){

                //fugaB2 fugaA4
                fugaA = compsNaTela.get(posA).getFuga4();
                fugaB = compsNaTela.get(posB).getFuga2();
                vamuLa = true;

            } else {

                //fugaB3 fugaA1
                fugaA = compsNaTela.get(posA).getFuga1();
                fugaB = compsNaTela.get(posB).getFuga3();

            }

        } else {

            if (angle >= 1){

                //fugaB2 fugaA4
                fugaA = compsNaTela.get(posA).getFuga4();
                fugaB = compsNaTela.get(posB).getFuga2();
                vamuLa = true;

            } else {

                //fugaB1 fugaA3
                fugaA = compsNaTela.get(posA).getFuga3();
                fugaB = compsNaTela.get(posB).getFuga1();

            }

        }

        //System.out.println(fugaA + " " + fugaB);

        if (vamuLa){

            temp.drawLine(fugaA.x, fugaA.y, fugaA.x, fugaA.y + ((fugaB.y - fugaA.y) / 2));
            temp.drawLine(fugaB.x, fugaB.y, fugaB.x, fugaB.y - ((fugaB.y - fugaA.y) / 2));

            temp.drawLine(fugaA.x, fugaA.y + ((fugaB.y - fugaA.y) / 2), fugaB.x, fugaB.y - ((fugaB.y - fugaA.y) / 2));

        } else {

            temp.drawLine(fugaA.x, fugaA.y, fugaA.x + ((fugaB.x - fugaA.x) / 2), fugaA.y);
            temp.drawLine(fugaB.x, fugaB.y, fugaA.x + ((fugaB.x - fugaA.x) / 2), fugaB.y);

            temp.drawLine(fugaA.x + ((fugaB.x - fugaA.x) / 2), fugaA.y, fugaA.x + ((fugaB.x - fugaA.x) / 2), fugaB.y);

        }
        
       
    }

    public void Open (String args){

        if (args.equals("Arquivo Corrompido ou Invalido")) Warnings(args, new Color(155, 0, 0));

        else {

            //System.out.println(args);
            compsNaTela = new Vector<CompDados>();
            conexoes = new Vector<String>();

            Vector caracs = new Vector();

            String[] pieces = args.split(":&:");
            String[] piecesOFpieces;

            dir = true;

            for (int i = 0; i < pieces.length; i++){

                piecesOFpieces = pieces[i].split(" ");

                caracs = new Vector();
                
                for (int j = 6; j < piecesOFpieces.length; j++) caracs.add(piecesOFpieces[j]);

                /*System.out.println(piecesOFpieces[0]);
                System.out.println(caracs);
                System.out.println("");*/

                if (piecesOFpieces[0].equals("processador")){

                    atual = getAtBiblio(13, false);
                    insertImage(piecesOFpieces[1], Integer.parseInt(piecesOFpieces[2]) + Integer.parseInt(piecesOFpieces[4]) / 2, Integer.parseInt(piecesOFpieces[3]) + Integer.parseInt(piecesOFpieces[5]) / 2, CenarioP, caracs, false, piecesOFpieces[0], false);

                } else if (piecesOFpieces[0].equals("memoria")){

                    atual = getAtBiblio(41, false);
                    insertImage(piecesOFpieces[1], Integer.parseInt(piecesOFpieces[2]) + Integer.parseInt(piecesOFpieces[4]) / 2, Integer.parseInt(piecesOFpieces[3]) + Integer.parseInt(piecesOFpieces[5]) / 2, CenarioP, caracs, false, piecesOFpieces[0], false);

                } else if (piecesOFpieces[0].equals("barramento")){

                    atual = getAtBiblio(28, false);
                    insertImage(piecesOFpieces[1], Integer.parseInt(piecesOFpieces[2]) + Integer.parseInt(piecesOFpieces[4]) / 2, Integer.parseInt(piecesOFpieces[3]) + Integer.parseInt(piecesOFpieces[5]) / 2, CenarioP, caracs, false, piecesOFpieces[0], false);

                } else if (piecesOFpieces[0].equals("timer")){

                    atual = getAtBiblio(54, false);
                    insertImage(piecesOFpieces[1], Integer.parseInt(piecesOFpieces[2]) + Integer.parseInt(piecesOFpieces[4]) / 2, Integer.parseInt(piecesOFpieces[3]) + Integer.parseInt(piecesOFpieces[5]) / 2, CenarioP, caracs, false, piecesOFpieces[0], false);

                } else if (piecesOFpieces[0].equals("bridge")){

                    atual = getAtBiblio(67, false);
                    insertImage(piecesOFpieces[1], Integer.parseInt(piecesOFpieces[2]) + Integer.parseInt(piecesOFpieces[4]) / 2, Integer.parseInt(piecesOFpieces[3]) + Integer.parseInt(piecesOFpieces[5]) / 2, CenarioP, caracs, false, piecesOFpieces[0], false);

                } else conexoes.add(pieces[i]);

            }

        }

    }

    public void variar(){

        //Controlador.controlador("/home/pardal/Desktop/VariacoesDeCache/Arquiteturas/jpeg_sc_2.vmp:&:open");
        Controlador.controlador("variar");


    }

}
